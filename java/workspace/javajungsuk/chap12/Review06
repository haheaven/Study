	제네릭 

  1. 개념 
   데이터 타입을 일반화하는 것 => 클래스나 메서드에서 사용할 내부 데이터 타입을 컴파일 시에 미리 지정하는 방법 (타입체크)
  
  2. 장점 
    타입 안정성 제공 -> 컴파일 이후 런타임에러는 프로그램이 죽는거지만 컴파일 오류는 미리 확인해서 코드를 수정할 수 있으므로 안정성이 좋다.
    타입체크와 형변환을 생략할 수 있으므로 코드가 간결 
 
  ex)
	ArrayList tvList = new ArrayList();
    tvList.add(new TV());

	TV t = (TV)tvList.get(0);     //  제네릭을 사용하지 않을 경우 형변환 필요		
   
   ------------------------------------------------
   
   ArrayList<Tv> tvList = new ArrayList<Tv>();
   tvList.add(new Tv());
 //  tvList.add(new Audio());  Tv타입 지정했으므로 컴파일 에러 확인 가능 -> 장점 : 타입 안정성 제공 
 
 	TV t = tvList.get(0);   //형변환 불필요 -> 장점 : 코드 간결 
 
 