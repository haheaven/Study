package chap7;

public class ex24 {

	public static void main(String[] args) {
		// 24. 다음 중 인터페이스의 장점이 아닌 것은?
//		a. 표준화를 가능하게 해준다.						T
//		b. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.   T
//		c. 독립적인 프로그래밍이 가능하다. 					T
//		d. 다중상속을 가능하게 해준다.						T(상속은 단일 상속- 메서드 충돌나기 때문)
//		e. 패키지간의 연결을 도와준다	

	}
}

// 답은 맞았으나 장점에 대한 설명 부족으로 추가 

/*  ---- 인터페이스 ----
    추상클래스의 집합으로 구현된 것이 하나도 없는 기본설계도라고 할 수 있다.
    미완성이므로 다른 클래스들의 구현을 위한 목적으로 작성된다. 
 
  1) 모든 멤버변수는 public static final -> 어떤 클래스에서도 사용해야하기 때문에 제어자가 넓어야하거나 따로 저장하는 pool에 있는 것만 가능
  2) 모든 메서드는 public, abstract 

    추상클래스와의 공통점 : 추상메서드 가지고 있다.
    추상클래스와의 차이점 : 추상클래스는 선언부(일반 변수)+추상메서드인 반면, 인터페이스는 일반 멤버 변수없이 추상메서드만 있다.
    			때문에 자손클래스에서는 여러 개의 추상클래스 상속받을 경우 같은 이름의 변수들이 있을 수 있고, 이들이 충돌날 수 있기 때문에 '단일상속'이 가능하다.
    			인터페이스는 오직 추상메서드만 있기 때문에(추상메서드 없이 선언 만있을수도 있음) 충돌 날 것들이 없기 때문에 '다중상속'이 가능하다.
 */




/*  인터페이스의 장점 
   1. 개발시간 단축
      : 기본 틀이 있기 때문에 틀속에서 작업, 독립적인 프로그래밍 특징으로 여러명의 개발자들이 각 구현 가능하다 
   2. 표준화 가능 
      : 기본 틀을 인터페이스로 작성 후 개발자들이 구현하면 정형화된 프로그램 개발 가능하다  
      : 인터페이스 큰 틀 역할 제공(관리자급에서 개발해서 개발자들에게 줌)
   3. 서로 관계없는 클래스들에게 관계를 맺어 줄 수 있다.
      : 서로 관련없는 클래스들에게 인터페이스를 줌으로써 인터페이스 그룹으로 묶을수있다.
   4. 독립적인 프로그래밍 가능  
      : 선언과 구현을 분리시킬 수 있기 때문에 독립적인 프로그래밍이 가능하다, 간접 관계로 변경해서 한 클래스가 바껴도 다른 클래스에 영향을 주지 않을 수도 있다. 
*/