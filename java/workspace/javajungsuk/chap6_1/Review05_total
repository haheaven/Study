 1. OOP(Object Oriented Programming)
   - 상속, 추상화, 캡술화, 다형성 
   - 장점 : 코드의 재사용, 코드 관리용이, 중북된 코드 제거, 확장가능 
   
   
 2. 클래스와 객체 
   - class : 객체의 사용 위해 정의함 (설계도)
   - object : 속성(field)과 기능(method)따라 구현
   -> 설계도를 통해 객체를 생성하며 각 field와 method에 맞게 구현하여 사용할 수 있게끔 객체를 만든다 .
 
   
 3. 변수 
   1) 선언위치에 따른 변수 종류 
    (1) 클래스 영역
   	   cv(Class Variable)     : static => 객체 생성 없이 언제나 호출 가능 
   	   iv(Instance Variable)  : 인스턴스를 생성해야만 사용 가능 
   	   ==> iv는 인스턴스가 생성될 때마다 생성되므로 각 인스턴스마다 값이 다를 수 있지만 
   	       cv는 static 정의로 공통속성을 지닌다. 
    (2) 클래스 외 영역 
    	lv(location Variable)  : 메서드 내 선언되어 메서드 구현 끝나면 gc로 
  
    	
  4. 메서드 
    - 프로그램의 구조화, 높은 재사용성, 중복 코드 제거를 위해 사용 
  
    
  5. JVM (Java Virtual Machine)
     
     METHOD AREA(cv)		 => 클래스의 클래스 파일을 읽어서 분석 후에 정보 제공함 
     ----------------------
     CALL STACK(lv) 		 => 메서드 작업에 필요한 공간 제용 -> 사용 후 gc 
     ----------------------
     HEAP(iv) 				 => 인스턴스 생성공간 
     ----------------------
  
     
   6. 오버로딩 
    - 같은 메서드명, 다른 타입 변수나 같은 타입이지만 수가 다른 것을 의미(리턴값상관없음) 
    - 장점 : 메서드 이름을 절약할 수 있으며, 같은 기능임을 파악할 수 있다. 
    ->  public void add(int a, int b)	  -> + 기능 
    ->  public void add(long a, long b)   -> + 기능 
    (vs 오버라이딩: 상속관계에서 자식이 부모의 메서드 원형(같은 메서드명,같은타입) 그대로 받지만 구현부(내용)는 다른 것을 의미)
 
 
    
   7. 생성자 
   - 개념 : 인스턴스가 생성될 때마다 호출되는 '인스턴스 초기화 메서드'
   - 특징 : 클래스명과 같아아야 한다. 리턴 값은 없다. 모든 클래스는 생성자가 있다. (없어도 컴파일시 디폴트 생성자 자동생성 )
           만약 기본생성자 없이 매개변수 있는 생성자를 만들게 되면 컴파일러가 기본생성자를 자동 생성 안해주므로 
           함께 사용 위해 꼭 기본생성자를 직접 만들어야 한다. 
   
   
   
   
   
   
   
   
   
    