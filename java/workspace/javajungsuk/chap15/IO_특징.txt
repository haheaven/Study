<입출력>
 stream : 데이터 연결 통로
 
 
 * read() ->  객체를 읽고 읽어올 데이터가 없으면 -1 을 반환한다.
    기본적인 read() 의 사용은 
   int data =0; while(  (data = input.read())  != -1 ) {}
   =>  읽을 객체의 읽기를 계쏙 시행하면서 data에 할당한다. 그러다 읽을 데이터가 없으면 -1로 반환하기 때문에 while문은 끝난다. 
 
 1. 바이트기반입출력 
 - InputStream / OutputStream : 모든 바이트 기반의 조상 
 - FileInputStream / FileOutputStream 
   => 바이트 단위로 파일 입출력 (ex.jpg, gif, exe...) 
   => 프로그램에서 많이 활용 
 
 
 2. 바이트기반의 보조스트림 
 - FilterInputStream / FilterOutputStream는 바이트기반 입출력의 자손이면서 보조스트림의 조상 
 - BufferedInputStream / BufferedOutputStream 
 => 1바이트씩 입출력하는 것보다 한번에 저장해서 보내기 때문에 효율이 높다. 
 
 
 
 3. 문자기반 입출력 
 - Reader / Writer : 문자 기반의 조상 
 - FileReader / FileWriter 
 => 파일로부터 '텍스트'데이터를 읽고, 파일에 쓰는데 사용(바이트기반파일입출력과 사용법같음) 
 
 
 4. 문자기반 보조스트림 
 - BufferedReader / BufferedWriter 
 => 입출력의 효율을 높일 수 있도록 해주는 역할 
 => readLine() 메소드를 통해 데이터를 줄 단위로 읽을 수 있다. 
 => writeLine() 메소드를 통해 newLine() 줄바꿈을 할 수 있다.
 
 5. 표준입출력과 File 
  1) 표준입출력 : System.in / System.out. / System.err
 			 콘솔을 통한 데이터의 입력과 콘솔로의 데이터 출력을 의미 
 			 자바에서는 표준 입출력을 위해 3가지 입출력 스트림. System.in / out / err 를 제공 
 			 자바 app 실행과 동시에 사용할 수 있게 생성되기 때문에 개발자가 별도로 스트림을 만들지 않았다. 
 
  2) File -> 디렉토리일수도, 파일일수도 
   - 생성자 / 메서드 
  ㄱ. File(String fileName) 
     : 주어진 문자열을 이름으로 갖는 파일을 위한 File인스턴스 생성 보통 fileName입력시 경로를 포함해서 지정해주지만, 
       실행 프로그램과 같은 위치일 경우는 이름만 사용해도된다. 
  ㄴ. File(String Path, String fileName)  : 첫번째 인수는 경로, 두번째는 파일 이름
  ㄷ. String getName   : 파일이름 문자열로 반환 
  ㄹ. String getPath   : 파일경로 문자열로 반환 
 
