 ----당일 퀴즈(11/5)----
 1. form 내부에 "hidden"타입을 주어 데이터를 전달한다.
 2. input type에 reset 기능있다 -> 스크립트 사용안해도 됨 
 3. form으로 submit한 곳에서 parameter로 받을 수 있음 (해당 페이지가 아닌 간 페이지)
 4. el사용시 ${} {}안에서 연산가능함->네임만 적을 수 있는게 아님 
 5. jstl 내부 큰 따옴표 바로 뒤 앞에 띄어쓰기 있을시 인식안함
 5. sendRedirect와 forward의 적절한 사용에 대해 공부하기 
 6. 파일입출력 흐름 외우기 
 7. 되도록 페이지 처리를 하는 자바작성 부분과 사용자에게 보여줄 html 처리는 구분하여 작성한다.
 
 // request.getRequestDispatcher("url").forward(request, response);  -> 반환 object 
   ( 웹 컨테이너 내부에서 전달하기 때문에 클라이언트 알 수 없음)
    1) 사용자는 서버의 이동을 알 수 없다.
     ct가 서버 a에게 요청하고 처리는 b가 하지만 클라이언트의 화면상 a가 보임 
    2) ct가 재요청(새로고침)을 할 경우 기존 request가 유지되므로 같은 걸로 재동작함
    3) 정보 조회에만 적합함. 
  
  
    
 //response.sendRedirect(url)  -> 반환 String
 	1) ct에게 특정 url로 이동하여 응답받을 것을 지정함 
 	2) ct가 a에게 요청하고 a가 리다이렉트로 b로 응답하면 ct는 b에게 응답받은 결과 뜸 
 	3) 요청 응답 객체 유지 안되므로 정보생성, 수정, 삭제에 적합하다. 
 	
 	  ex) 회원가입 페이지 
 	-> 회원정보를 입력하고 실수로 새로고침을 할 경우 forward의 경우 입력이 같은 객체(request)에 저장되어 
 	-> 같은 내용의 회원가입요청이 진행된다.( 생성, 삽입, 삭제에는 forward 적합하지 않다. )
 	-> 그러나 리다이렉트는 정보를 유지하고 있지 않기 때문에 같은 내용의 회원가입 요청이 여러번 되지 않는다. 
 	   ex) 로그인 페이지 
 	-> 보통 로그인 성공 후 다른 시스템으로 이동한다.
 	-> 그럼 기존 request객체 속에 있는 비밀번호와 같은 필드는 필요없기 때문에 
 	-> redirect로 요청및응답객체를 지우고, 새시스템에서 새롭게 시작함  
 	   ( id가 유지되는 경우는 쿠키나 세션에 저장해서 사용)
 	
 	--> redirect로 서버이용하고 session등으로 저장한 다음에 회원가입/로그인 과정이 계속 진행됨 .
 
 
quiz5/8의 경우엔
회원가입이 "끝"나면 새로운 곳으로 클라이언트가 이동해야하기 때문에 
같은 화면을 계속 보여주는 forward가 아닌  redirect가 적절하다. 
회원가입이 끝나도 입력시 보여줬던 내용이 그대로 있는건 서버측에 따로 파일을 저장하고 같은 파일을 읽어왔기 때문이다. 



 ----당일 퀴즈(11/6)----
 1. el 사용과 jstl 사용이 더 자연스러워짐 
 2. 모범답안 및 이전 풀이방식과 다른 방법을 생각해봄 
 3. request의 처리 후  응답하는 경우 꼭 인코딩먼저 설정하기 request.setCharacterEncoding("utf-8");
 4. 파일입출력의 흐름과 컬렉션의 유용한 메서드 공부하기
